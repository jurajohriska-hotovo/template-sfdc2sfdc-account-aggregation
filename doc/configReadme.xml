<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce Org to Org Account Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator, I want to aggregate accounts from two Salesforce instances and compare them to see which accounts can only be found in one of the two and which accounts are in both instances. 

This template generates the result a CSV report that is sent by email to addresses you configure.

This template extracts data from two systems, aggregates data, compares values of fields for the objects, and generates a CSV report of the differences.

As implemented, it gets accounts from two instances of Salesforce, compares by the name of the accounts, and generates a CSV file which shows accounts in A, accounts in B, and accounts in A and B. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for all to run smoothly.
Failing to do so could lead to unexpected behavior of the template.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After you have your app running, if you chose `sfdc2sfdc-accounts-aggregation` as the domain name to trigger the use case browse to `http://sfdc2sfdc-accounts-aggregation.cloudhub.io/generatereport` and report is sent to the emails configured.
]]>
		</section>
		<section id="default_running_on_premise">
<![CDATA[
Complete all properties in one of the property files, for example in mule.prod.properties and run your app with the corresponding environment variable to use it. To follow the example, this is `mule.env=prod`.

After this, to trigger the use case, browse to the local HTTP endpoint with the port you configured in your file. For example if you use `9090` for the port, browse to `http://localhost:9090/generatereport` and the application creates a CSV report and sends it to the configured emails.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

### SalesForce Connector Configuration for Company A

+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/42.0`

### SalesForce Connector Configuration for Company B

+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/42.0`

### SMTP Services Configuration

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

### Email Details

+ mail.from `exampleuser@example.com`
+ mail.to `woody.guthrie@example.com`
+ mail.subject `Accounts Report`
+ mail.body `Find attached your Accounts Report`
+ attachment.name `accounts_report.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, this template
only makes one API call to Salesforce during aggregation. 
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you find the endpoint to start the aggregation. This template uses an HTTP Listener to trigger the use case.

$H$H# Trigger Flow
**HTTP Listener** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change as you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub then routes requests from your application domain URL to the endpoint.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functionality of this template is implemented in the XML, directed by a flow responsible for conducting the aggregation of data, comparing records, and finally formating the output, in this case being a report.

Using the Scatter-Gather component, this template queries the data in different systems. After that the aggregation is implemented in a DataWeave 2 script using the Transform component.

Aggregated results are sorted by:

1. Accounts only in Salesforce A
2. Accounts only in Salesforce B
3. Accounts in both Salesforce A and Salesforce B

The result is transformed to CSV format. The final report in CSV format is sent to the email addresses  you configured in the `mule.*.properties` file.
]]>
		</section>
	</sections>
</configuration>
